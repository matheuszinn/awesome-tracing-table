{"version":3,"sources":["Introduction.js","Experience.js","App.js","reportWebVitals.js","index.js"],"names":["Introcution","className","Component","Experience","props","onClick","callback","App","React","useState","isVisible","setVisible","isFullScreen","setFullscreen","toggleExperience","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAEqBA,E,4JACjB,WACI,OACI,qCACI,sDAGA,oBAAGC,UAAU,kBAAb,wEAEI,uBAFJ,qE,GAPyBC,aCW1BC,G,MATI,SAACC,GAEhB,OACI,wBAAQH,UAAU,aAAaI,QAASD,EAAME,SAA9C,uCCsBOC,MArBf,WACE,MAAgCC,IAAMC,UAAS,GAA/C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCH,IAAMC,UAAS,GAArD,mBAAOG,EAAP,KAAqBC,EAArB,KAEMC,EAAmB,WACvBH,GAAYD,GACZG,GAAeD,IAGjB,OACE,cAAC,IAAD,CAAoBA,aAAcA,EAAcG,SAAUD,EAA1D,SACE,qBAAKb,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACGS,GAAa,cAAC,EAAD,IACbA,GAAa,cAAC,EAAD,CAAYJ,SAAUQ,YCV/BE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7755f0ff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Introcution extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <p>\r\n                    Awesome Tracing Table\r\n                </p>\r\n                <p className=\"App-Description\">\r\n                    This extremely advanced app that simulates a tracing table.\r\n                    <br />\r\n                    Checkout the full experience clicking the button bellow.\r\n                </p>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport './Experience.css';\r\n\r\nconst Experience = (props) => {\r\n\r\n    return (\r\n        <button className=\"App-Button\" onClick={props.callback}>\r\n              Show me the experience.\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Experience;","import React from \"react\";\nimport { DocumentFullScreen } from \"@chiragrupani/fullscreen-react\";\n\nimport \"./App.css\";\n\nimport Introduction from \"./Introduction\";\nimport Experience from './Experience';\n\nfunction App() {\n  const [isVisible, setVisible] = React.useState(true);\n  const [isFullScreen, setFullscreen] = React.useState(false);\n\n  const toggleExperience = () => {\n    setVisible(!isVisible);\n    setFullscreen(!isFullScreen);\n  };\n\n  return (\n    <DocumentFullScreen isFullScreen={isFullScreen} onChange={toggleExperience}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {isVisible && <Introduction />}\n          {isVisible && <Experience callback={toggleExperience}/>}\n        </header>\n      </div>\n    </DocumentFullScreen>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}